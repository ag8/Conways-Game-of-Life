import javax.swing.*;
import java.awt.*;
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.Stroke;
import java.awt.event.*;

public class Buttons extends JPanel{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static JFrame f;
	private JPanel panel;
	private Hexagon hex;
	private Color thisColor;
	private Point center;
	private int radius;
	
	public Buttons() {
		setOpaque(true);
		panel = new JPanel();
		center = new Point(50,50);
		radius = 40;
		hex = new Hexagon(center,radius);
		setPreferredSize(new Dimension(100, 100));
		add(panel);
		
	/*	addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (thisColor.equals(Color.black) && hex.contains(e.getPoint())) {
					setColoring(Color.white);
				}
				else if (thisColor.equals(Color.white) && hex.contains(e.getPoint())) {
					setColoring(Color.black);
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		}); */
	}
	
	public Buttons(Point p, int r) {
		setOpaque(true);
		panel = new JPanel();
		center = p;
		radius = r;
		hex = new Hexagon(center,radius);
		setPreferredSize(new Dimension(100, 100));
		add(panel);
		
	/*	addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (thisColor.equals(Color.black) && hex.contains(e.getPoint())) {
					setColoring(Color.white);
				}
				else if (thisColor.equals(Color.white) && hex.contains(e.getPoint())) {
					setColoring(Color.black);
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		}); */
	}
	
	public Buttons(int x, int y, int r) {
		setOpaque(true);
		panel = new JPanel();
		center = new Point(x,y);
		radius = r;
		hex = new Hexagon(center,radius);
		setPreferredSize(new Dimension(100, 100));
		add(panel);
		
	/*	addMouseListener(new MouseListener() {
			@Override
			public void mouseClicked(MouseEvent e) {
				if (thisColor.equals(Color.black) && hex.contains(e.getPoint())) {
					setColoring(Color.white);
				}
				else if (thisColor.equals(Color.white) && hex.contains(e.getPoint())) {
					setColoring(Color.black);
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				
			}
		}); */
	}
	
	public Boolean isOn() {
		return this.thisColor.equals(Color.black);
	}
	
	public void draw(Graphics2D g, int x, int y, int lineThickness, int colorValue, boolean filled) {
        // Store before changing.
        Stroke tmpS = g.getStroke();
        Color tmpC = g.getColor();

        g.setColor(new Color(colorValue));
        g.setStroke(new BasicStroke(lineThickness, BasicStroke.CAP_SQUARE, BasicStroke.JOIN_MITER));

        if (filled)
            g.fillPolygon(hex.xpoints, hex.ypoints, hex.npoints);
        else
            g.drawPolygon(hex.xpoints, hex.ypoints, hex.npoints);

        // Set values to previous when done.
        g.setColor(tmpC);
        g.setStroke(tmpS);
    }
	
	public Hexagon getHex() {
		return hex;
	}
	
	public void setRadius(int r) {
		radius = r;
		f.repaint();
	}
	
	public int getRadius() {
		return radius;
	}
	
	public Point getCenter() {
		return center;
	}
	
	public void setCenter(Point p) {
		center = p;
		f.repaint();
	}
	
	public void setCenter(int x, int y) {
		center = new Point(x,y);
		f.repaint();
	}
	
	public void setColoring(Color choice) {
		thisColor = choice;
		f.repaint();
	}
	
	public void toggle() {
		if (isOn()) {
			this.setColoring(Color.white);
		}
		else
			this.setColoring(Color.black);
	}
	
	public Color getColoring() {
		return thisColor;
	}
	
	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;
		g2.setColor(thisColor);
		g2.fill(hex);
	}
	
	/*public static void main(String[] args) {
		f = new JFrame();
        f.setSize(500, 500);
        f.setTitle("A hexagonal button");
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setContentPane(new Buttons());
        f.setVisible(true);
    }*/
    
}
